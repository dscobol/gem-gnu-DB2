      **********************************************************
      * Program name:    SALESINQ
      * Original author: David Stagowski
      *
      *    Description: A COBOL program that processes DB2 data
      *    with a cursor.
      *
      * Maintenance Log
      * Date       Author        Maintenance Requirement
      * ---------- ------------  --------------------------------
      * 2023-03-11 dscobol       Created to learn.
      * 20XX-XX-XX               If you change me, change this.
      *
      **********************************************************
       IDENTIFICATION DIVISION.
       PROGRAM-ID. SALESINQ.

       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
      * SOURCE-COMPUTER.   IBM WITH DEBUGGING MODE.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
           EXEC SQL
               INCLUDE SQLCA
           END-EXEC.

           EXEC SQL
           DECLARE CUSTOMERS TABLE
           (
            CUSTNO        CHAR(6) not null,
           	FNAME         CHAR(20) not null,
           	LNAME         CHAR(30) not null,
           	ADDR          CHAR(30) not null,
           	CITY          CHAR(20) not null,
           	STATE         CHAR(2) not null,
           	ZIPCODE       CHAR(10) not null)
           END-EXEC.

           EXEC SQL
           DECLARE INVOICES TABLE
           (
           	INVCUST         CHAR(6) not null,
           	INVNO           CHAR(6) not null,
           	INVDATE         DATE not null,
           	INVSUBT         DECIMAL(9,2) not null,
           	INVSHIP         DECIMAL(7,2) not null,
           	INVTAX          DECIMAL(7,2) not null,
           	INVTOTAL        DECIMAL(9,2) not null,
           	INVPROM         CHAR(10) not null)
           END-EXEC.

           EXEC SQL BEGIN DECLARE SECTION END-EXEC.
       01  HV-Customer-Row.
           12 HV-Cust-Number          PIC X(06).
           12 HV-Cust-First-Name      PIC X(20).
           12 HV-Cust-Last-Name       PIC X(30).
           12 HV-Cust-Address         PIC X(30).
           12 HV-Cust-City            PIC X(20).
           12 HV-Cust-State           PIC X(02).
           12 HV-Cust-ZipCode         PIC X(10).

       01  HV-Invoice-Row.
           12 HV-Inv-Number           PIC X(06).
           12 HV-Inv-Date             PIC X(10).
           12 HV-Inv-Total            PIC S9(7)V99 COMP-3.

      *    This is hardcoded for the MURACH DB.
      *    You might need to update this for your DB.
       01  DB-Connection-Info.
           12 DB-Alias                PIC X(8) VALUE 'MURACH'.
           12 DB-User-ID              PIC X(10).
           12 DB-Password.
              15 DB-Passwd-Length     PIC S9(4) COMP-5  VALUE 0.
              15 DB-Passwd-Name       PIC X(18).
           EXEC SQL END DECLARE SECTION END-EXEC.

           EXEC SQL
           DECLARE DB1-C1 CURSOR FOR
              SELECT INVNO, INVDATE, INVTOTAL
              FROM INVOICES
              WHERE INVCUST = :HV-Cust-Number
           END-EXEC.

       01 WS-SQL-STATUS                PIC S9(9) COMP-5.
          88 SQL-STATUS-OK             VALUE    0.
          88 SQL-STATUS-NOT-FOUND      VALUE  100.
          88 SQL-STATUS-DUP            VALUE -803.

       01  WS-Application-Flags.
           12 WS-Inquiry-Flag          PIC X.
              88 WS-Keep-Looking       VALUE 'Y'.
              88 WS-Stop-Looking       VALUE 'N'.
           12 WS-Find-Customer-Flag    PIC X.
              88 WS-Customer-Found     VALUE 'Y'.
              88 WS-Customer-Not-Found VALUE 'N'.
           12 WS-Find-Invoices-Flag    PIC X.
              88 WS-Invoices-Found     VALUE 'Y'.
              88 WS-Invoices-Not-Found VALUE 'N'.

       01  WS-Application-Storage.
           12 WS-Inv-Counter           PIC S9(5) VALUE ZERO.
           12 WS-Inv-Total             PIC S9(7)V99 VALUE ZERO.
           12 WS-Display-Counter       PIC Z(4)9.
           12 WS-Display-Total         PIC Z(6)9.99.

       01  WS-Display-Rows.
           12 WS-Customer-Row.
              15 FILLER                PIC X(03) VALUE SPACES.
              15 FILLER                PIC X(09) VALUE 'Customer:'.
              15 FILLER                PIC X(01) VALUE SPACES.
              15 WS-CR-Customer-Num    PIC X(6).
              15 FILLER                PIC X(04) VALUE ' -- '.
              15 WS-CR-Customer-Name   PIC X(30).

           12 WS-Invoice-Row.
              15 FILLER                PIC X(03) VALUE SPACES.
              15 FILLER                PIC X(08) VALUE 'Invoice:'.
              15 FILLER                PIC X(01) VALUE SPACES.
              15 WS-IR-Invoice-Num     PIC X(6).
              15 FILLER                PIC X(01) VALUE SPACES.
              15 WS-IR-Invoice-Date    PIC X(10).
              15 FILLER                PIC X(01) VALUE SPACES.
              15 WS-IR-Invoice-Total   PIC Z(6)9.99.

           12 WS-Invoice-Total-Row.
              15 FILLER                PIC X(06) VALUE SPACES.
              15 FILLER                PIC X(13) VALUE 'Total Billed:'.
              15 FILLER                PIC X(11) VALUE SPACES.
              15 WS-ITR-Total          PIC Z(6)9.99.
           12 WS-Invoice-Counter-Row.
              15 FILLER                PIC X(03) VALUE SPACES.
              15 FILLER                PIC X(22)
                 VALUE 'Invoices Issued:'.
              15 FILLER                PIC X(10) VALUE SPACES.
              15 WS-ITR-Counter        PIC Z(4)9.

       01  WS-Called-Programs.
           12 WS-GetDBId               PIC X(8) VALUE SPACES.

       01 EOJ-Display-Messages.
           12 EOJ-End-Message PIC X(042) VALUE
              "*** Program SALESINQ - End of Run Messages".

       PROCEDURE DIVISION.
       0000-Mainline.
           PERFORM 1000-Begin-Job.
           PERFORM 2000-Process.
           PERFORM 3000-End-Job.
           GOBACK.

       1000-Begin-Job.
           PERFORM 9800-Connect-to-DB1.

       2000-Process.
           SET WS-Keep-Looking TO TRUE.
           PERFORM 2100-Customer-Invoices
              UNTIL WS-Stop-Looking.

       2100-Customer-Invoices.
           PERFORM 2110-Accept-Customer-Number.
           IF WS-Keep-Looking
              PERFORM 2120-Get-Customer
              PERFORM 2130-Display-Customer
              IF WS-Customer-Found
                 PERFORM 2140-Get-Invoices
           END-IF.

       2110-Accept-Customer-Number.
           DISPLAY '-------------  Sales Inquiry --------------------'.
           DISPLAY 'Key in the next Customer Number and press Enter,'.
           DISPLAY 'or key in 999999 and press Enter to quit.'.
           ACCEPT HV-Cust-Number.
           IF HV-Cust-Number = '999999'
              SET WS-Stop-Looking TO TRUE
           END-IF.

       2120-Get-Customer.
           PERFORM 5000-Read-DB1.

       2130-Display-Customer.
           IF WS-Customer-Found
              PERFORM 2131-Display-Customer-Found
           ELSE
              PERFORM 2132-Display-Cust-Not-Found
           END-IF.

       2131-Display-Customer-Found.
           MOVE HV-Cust-Number TO WS-CR-Customer-Num.
           STRING
              FUNCTION TRIM(HV-Cust-First-Name) DELIMITED BY SIZE,
              SPACE DELIMITED BY SIZE,
              FUNCTION TRIM(HV-Cust-Last-Name) DELIMITED BY SIZE,
             INTO WS-CR-Customer-Name.

           DISPLAY '-------------  Sales Inquiry --------------------'.
           DISPLAY WS-Customer-Row.

       2132-Display-Cust-Not-Found.
           DISPLAY '-------------  Sales Inquiry --------------------'.
           DISPLAY ' Customer: ' HV-Cust-Number ' was not found.'.

       2140-Get-Invoices.
           SET WS-Invoices-Found TO TRUE.
           INITIALIZE WS-Inv-Counter, WS-Inv-Total.
           PERFORM 2141-Open-Cursor.
           IF SQL-STATUS-OK
              PERFORM 2143-Display-Invoices UNTIL
                 WS-Invoices-Not-Found
           END-IF.
           PERFORM 2145-Display-Total-Invoices.
           PERFORM 2149-Close-Cursor.

       2141-Open-Cursor.
           EXEC SQL OPEN DB1-C1 END-EXEC.
           MOVE SQLCODE TO WS-SQL-STATUS.

       2143-Display-Invoices.
           PERFORM 5100-Fetch-DB1-Cur.
           IF WS-Invoices-Found
              ADD +1 TO WS-Inv-Counter
              ADD HV-Inv-Total TO WS-Inv-Total
              PERFORM 2144-Display-Invoice
           END-IF.

       2144-Display-Invoice.
           MOVE HV-Inv-Number TO WS-IR-Invoice-Num.
           MOVE HV-Inv-Date   TO WS-IR-Invoice-Date.
           MOVE HV-Inv-Total  TO WS-IR-Invoice-Total.
           DISPLAY WS-Invoice-Row.

       2145-Display-Total-Invoices.
           MOVE WS-Inv-Counter  TO WS-ITR-Counter.
           MOVE WS-Inv-Total    TO WS-ITR-Total.
           IF WS-Inv-Total > 0
              DISPLAY '                     ____________________'
           END-IF.
           DISPLAY WS-Invoice-Total-Row.
           DISPLAY WS-Invoice-Counter-Row.
           DISPLAY SPACE.

       2149-Close-Cursor.
           EXEC SQL CLOSE DB1-C1 END-EXEC.

       3000-End-Job.
           EXEC SQL CONNECT RESET END-EXEC.
           MOVE SQLCODE TO WS-SQL-STATUS.

       5000-Read-DB1.
           EXEC SQL
              SELECT CUSTNO, FNAME, LNAME,
                     ADDR, CITY, STATE,
                     ZIPCODE
              INTO
                 :HV-Cust-Number,
                 :HV-Cust-First-Name,
                 :HV-Cust-Last-Name,
                 :HV-Cust-Address,
                 :HV-Cust-City,
                 :HV-Cust-State,
                 :HV-Cust-ZipCode
              FROM CUSTOMERS
                 WHERE CUSTNO = :HV-Cust-Number
           END-EXEC.
           MOVE SQLCODE TO WS-SQL-STATUS.
           EVALUATE TRUE
              WHEN SQL-STATUS-OK
                 SET WS-Customer-Found TO TRUE
              WHEN SQL-STATUS-NOT-FOUND
                 SET WS-Customer-Not-Found TO TRUE
              WHEN OTHER
                 DISPLAY "*** WARNING ***"
                 DISPLAY "There was a problem Reading the DB."
                 DISPLAY "SQLCODE = " SQLCODE
                 PERFORM 3000-End-Job
                 MOVE 8 TO RETURN-CODE
                 GOBACK
           END-EVALUATE.

       5100-Fetch-DB1-Cur.
           EXEC SQL FETCH DB1-C1
              INTO
                 :HV-Inv-Number,
                 :HV-Inv-Date,
                 :HV-Inv-Total
           END-EXEC.
           MOVE SQLCODE TO WS-SQL-STATUS.
           EVALUATE TRUE
              WHEN SQL-STATUS-OK
                 SET WS-Invoices-Found TO TRUE
              WHEN OTHER
                 SET WS-Invoices-Not-Found  TO TRUE
           END-EVALUATE.

       9800-Connect-to-DB1.
           PERFORM 9810-Setup-DB1-Connection.
           IF SQL-STATUS-OK
              CONTINUE
           ELSE
              DISPLAY "*** The DB connection is not valid!***"
              DISPLAY "Exiting the program.!"
              GOBACK
           END-IF.

       9810-Setup-DB1-Connection.
           PERFORM 9811-Get-Credentials.
           PERFORM 9814-Connect-To-DB1.

       9811-Get-Credentials.
           MOVE 'GETDBID' TO WS-GetDBId
           CALL WS-GetDBId USING DB-User-ID, DB-Passwd-Name.
      * Passwords in a CONNECT statement must be entered in a VARCHAR
      * format with the length of the input string.
           INSPECT DB-Passwd-Name
              TALLYING DB-Passwd-Length
              FOR CHARACTERS BEFORE INITIAL " ".

       9814-Connect-To-DB1.
           EXEC SQL CONNECT TO :DB-Alias
                USER :DB-User-ID
                USING :DB-Passwd-Name
              END-EXEC.
           MOVE SQLCODE TO WS-SQL-STATUS.
